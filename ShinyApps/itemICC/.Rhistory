plot(rnorm(100))
LS
ls
ls9)
ls()
dir()
getwd()
q()
getwd()
dir()
setwd("/Dropbox")
setwd("Dropbox")
dir()
setwd("CCSSO Talk")
dir()
setwd("newtalk")
dir()
update_all = FALSE
if (update_all) update.packages(ask=FALSE)
installPackagesCRAN = function(needed_packages){
for (i in 1:length(needed_packages)){
haspackage = require(needed_packages[i], character.only = TRUE)
if (haspackage==FALSE){
install.packages(needed_packages[i])
require(needed_packages[i], character.only = TRUE)
}
}
}
installPackagesGithub = function(neededPackages, packagePath){
#forces update as packages may change frequently
for (i in 1:length(neededPackages)){
install_github(packagePath[i])
require(neededPackages[i], character.only = TRUE)
}
}
neededPackagesCRAN = c("servr", "devtools")
installPackagesCRAN(needed_packages = neededPackagesCRAN)
neededPackagesGithub = c("slidify", "slidifyLibraries")
packagePathGithub = c("ramnathv/slidify", "ramnathv/slidifyLibraries")
installPackagesGithub(neededPackages = neededPackagesGithub, packagePath = packagePathGithub)
TalkName = "CCSSOtalk"
author(TalkName)
slidify("index.Rmd")
servr::httw()
install.packages("devtools")
install.packages("openssl")
install.packages("libssl-dev")
install.packages("devtools")
setwd("/Users/jonathantemplin/Dropbox/CCSSO Talk/ShinyApps/itemICC/"
)
shiny::runApp()
runApp()
runApp()
#install.packages("shiny")
library(shiny)
ui = fluidPage(
# *Input() functions,
fluidRow(h2("Hypothetical Item Characteristic Curve", style="text-align: center;")),
fluidRow(column(3,h4("Item Parameter Values"))),
fluidRow(column(3,  sliderInput(inputId = "intercept",
label = "Item Intercept",
value = -3, min=-4, max=4, step = .1) ,
sliderInput(inputId = "discrimination",
label = "Domain Discriminiation (Conditional)",
value = 2, min=0, max=4, step=.1),
actionButton(inputId = "draw", label = "Resample Reliabilities")
),
column(9,   # *Output() functions
plotOutput("corrMatrix"))),
fluidRow(a("Link to R script underlying this Shiny App", href = "itemICC_app_initial.R", target="_blank"))
)
server = function(input, output){
# output$corrMatrix = renderPlot({
#
# })
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
#install.packages("shiny")
library(shiny)
ui = fluidPage(
# *Input() functions,
fluidRow(h2("Hypothetical Item Characteristic Curve", style="text-align: center;")),
fluidRow(column(3,h4("Item Parameter Values"))),
fluidRow(column(3,  sliderInput(inputId = "intercept",
label = "Item Intercept",
value = -3, min=-4, max=4, step = .1) ,
sliderInput(inputId = "discrimination",
label = "Domain Discriminiation (Conditional)",
value = 2, min=0, max=4, step=.1),
sliderInput(inputId = "me1",
label = "Cross-cutting Concept Main Effect (Conditional)",
value = 2, min=0, max=4, step=.1),
sliderInput(inputId = "me2",
label = "Practice Main Effect (Conditional)",
value = 2, min=0, max=4, step=.1),
sliderInput(inputId = "thetaalpha1",
label = "Domain-by-Concept Interaction (Conditional)",
value = 2, min=-4, max=4, step=.1),
sliderInput(inputId = "thetaalpha2",
label = "Domain-by-Practice Interaction (Conditional)",
value = 2, min=-4, max=4, step=.1),
sliderInput(inputId = "alpha1alpha2",
label = "Concept-by-Practice Interaction (Conditional)",
value = 2, min=-4, max=4, step=.1),
sliderInput(inputId = "threeway",
label = "Domain-by-Concept-by-Practice Interaction",
value = 2, min=-4, max=4, step=.1)
),
column(9,   # *Output() functions
plotOutput("corrMatrix"))),
fluidRow(a("Link to R script underlying this Shiny App", href = "itemICC_app_initial.R", target="_blank"))
)
server = function(input, output){
values = reactive({
theta = seq(-4,4,.01)
alpha = matrix(data = 0, nrow = 4, ncol = 2)
alpha[2,2] = 1
alpha[3,1] = 1
alpha[4,1:2] = 1
Intercept = input$intercept
Discrimination = input$discrimination
ME1 = input$me1
ME2 = input$me2
ThetaAlpha1 = input$thetaalpha1
ThetaAlpha2 = input$thetaalpha2
Alpha1Alpha2 = input$alpha1alpha2
ThreeWay = input$threeway
yplot = NULL
xplot = cbind(theta, theta, theta, theta)
for (pattern in 1:dim(alpha)[1]){
logit = Intercept + Discrimination*theta + ME1*alpha[pattern,1] + ME2*alpha[pattern,2] + ThetaAlpha1*theta*alpha[pattern,1] +
ThetaAlpha2*theta*alpha[pattern,2] + Alpha1Alpha2*alpha[pattern,1]*alpha[pattern,2] + ThreeWay*theta*alpha[pattern,1]*alpha[pattern,2]
yplot = cbind(yplot,exp(logit)/(1+exp(logit)))
}
})
output$corrMatrix = renderPlot({
values2 = values()
matplot(y = values2$yplot, x = values2$xplot, type = "l", lwd=5, col=1:4, lty=1:4, cex.axis = 1.4, cex.lab = 1.4, cex.main = 1.4,
xlab = "Content Domain Score", ylab = "Probability of Correct Response", main = "ICCs for Hypothetical Item")
legend(x = 1, y = .2, legend = c("Cross-Concept: NM; Practice: NM", "Cross-Concept: NM; Practice: M",
"Cross-Concept: M; Practice: NM","Cross-Concept: M; Practice: M"), col=1:4, lty=1:4,
lwd =5)
})
}
shinyApp(ui = ui, server = server)
values <- reactiveValues(A=1)
r
values
values()
values$A
values = reactiveValues(A=1)
values$A
reactiveB = reactive({})
reactiveB = reactive({values$A + 1})
reactiveB
runApp()
#install.packages("shiny")
library(shiny)
ui = fluidPage(
# *Input() functions,
fluidRow(h2("Hypothetical Item Characteristic Curve", style="text-align: center;")),
fluidRow(column(3,h4("Item Parameter Values"))),
fluidRow(column(3,  sliderInput(inputId = "intercept",
label = "Item Intercept",
value = -3, min=-4, max=4, step = .1) ,
sliderInput(inputId = "discrimination",
label = "Domain Discriminiation (Conditional)",
value = 2, min=0, max=4, step=.1),
sliderInput(inputId = "me1",
label = "Cross-cutting Concept Main Effect (Conditional)",
value = 1, min=0, max=4, step=.1),
sliderInput(inputId = "me2",
label = "Practice Main Effect (Conditional)",
value = 2, min=0, max=4, step=.1),
sliderInput(inputId = "thetaalpha1",
label = "Domain-by-Concept Interaction (Conditional)",
value = -.5, min=-4, max=4, step=.1),
sliderInput(inputId = "thetaalpha2",
label = "Domain-by-Practice Interaction (Conditional)",
value = -1, min=-4, max=4, step=.1),
sliderInput(inputId = "alpha1alpha2",
label = "Concept-by-Practice Interaction (Conditional)",
value = 3, min=-4, max=4, step=.1),
sliderInput(inputId = "threeway",
label = "Domain-by-Concept-by-Practice Interaction",
value = 2, min=-4, max=4, step=.1)
),
column(9,   # *Output() functions
plotOutput("corrMatrix"))),
fluidRow(a("Link to R script underlying this Shiny App", href = "itemICC_app_initial.R", target="_blank"))
)
server = function(input, output){
output$corrMatrix = renderPlot({
theta = seq(-4,4,.01)
alpha = matrix(data = 0, nrow = 4, ncol = 2)
alpha[2,2] = 1
alpha[3,1] = 1
alpha[4,1:2] = 1
Intercept = input$intercept
Discrimination = input$discrimination
ME1 = input$me1
ME2 = input$me2
ThetaAlpha1 = input$thetaalpha1
ThetaAlpha2 = input$thetaalpha2
Alpha1Alpha2 = input$alpha1alpha2
ThreeWay = input$threeway
yplot = NULL
xplot = cbind(theta, theta, theta, theta)
for (pattern in 1:dim(alpha)[1]){
logit = Intercept + Discrimination*theta + ME1*alpha[pattern,1] + ME2*alpha[pattern,2] + ThetaAlpha1*theta*alpha[pattern,1] +
ThetaAlpha2*theta*alpha[pattern,2] + Alpha1Alpha2*alpha[pattern,1]*alpha[pattern,2] + ThreeWay*theta*alpha[pattern,1]*alpha[pattern,2]
yplot = cbind(yplot,exp(logit)/(1+exp(logit)))
}
matplot(y = yplot, x = xplot, type = "l", lwd=5, col=1:4, lty=1:4, cex.axis = 1.4, cex.lab = 1.4, cex.main = 1.4,
xlab = "Content Domain Score", ylab = "Probability of Correct Response", main = "ICCs for Hypothetical Item")
legend(x = 1, y = .2, legend = c("Cross-Concept: NM; Practice: NM", "Cross-Concept: NM; Practice: M",
"Cross-Concept: M; Practice: NM","Cross-Concept: M; Practice: M"), col=1:4, lty=1:4,
lwd =5)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rsconnect)
deployApp()
